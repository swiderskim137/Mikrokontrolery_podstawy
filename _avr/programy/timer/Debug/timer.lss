
timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000172  2**0
                  ALLOC
  2 .stab         000003a8  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000069b  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	3e c0       	rjmp	.+124    	; 0x90 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	5a c0       	rjmp	.+180    	; 0xfa <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:

//zmienna pomocnicza-licznik u¿ywana w przerwaniu
volatile uint8_t cnt=0;

void main(void)
{
  48:	df 93       	push	r29
  4a:	cf 93       	push	r28
  4c:	cd b7       	in	r28, 0x3d	; 61
  4e:	de b7       	in	r29, 0x3e	; 62
 //########### I/O ###########
 DDRB  |= ((1<<LED1) | (1<<LED2)); //Ustawienie pinów steruj¹cych diodami
  50:	a7 e3       	ldi	r26, 0x37	; 55
  52:	b0 e0       	ldi	r27, 0x00	; 0
  54:	e7 e3       	ldi	r30, 0x37	; 55
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	80 81       	ld	r24, Z
  5a:	8c 93       	st	X, r24
                                                  // jako wyjœcia
 PORTB |= (1<<LED1); //Ustawienie stanu wysokiego na wyjœciu steruj¹cym LED1
  5c:	a8 e3       	ldi	r26, 0x38	; 56
  5e:	b0 e0       	ldi	r27, 0x00	; 0
  60:	e8 e3       	ldi	r30, 0x38	; 56
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	80 81       	ld	r24, Z
  66:	8c 93       	st	X, r24
                                  //(stan pocz¹tkowy)
 //##########################

 //######## konfiguracja timera ##############
 TIMSK |= (1<<TOIE0);           //Przerwanie overflow (przepe³nienie timera)
  68:	a9 e5       	ldi	r26, 0x59	; 89
  6a:	b0 e0       	ldi	r27, 0x00	; 0
  6c:	e9 e5       	ldi	r30, 0x59	; 89
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	81 60       	ori	r24, 0x01	; 1
  74:	8c 93       	st	X, r24
 TCCR0 |= (1<<CS02) | (1<<CS00); // Ÿród³em CLK, preskaler 1024
  76:	a3 e5       	ldi	r26, 0x53	; 83
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	e3 e5       	ldi	r30, 0x53	; 83
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	85 60       	ori	r24, 0x05	; 5
  82:	8c 93       	st	X, r24
 TCNT0 = timer_start;//          //Pocz¹tkowa wartoœæ licznika
  84:	e2 e5       	ldi	r30, 0x52	; 82
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	86 e0       	ldi	r24, 0x06	; 6
  8a:	80 83       	st	Z, r24
 //###########################################

 sei();//Globalne uruchomienie przerwañ
  8c:	78 94       	sei
  8e:	ff cf       	rjmp	.-2      	; 0x8e <main+0x46>

00000090 <__vector_9>:
}


//############ Procedura obs³ugi przerwania od przepe³nienia timera ############
ISR(TIMER0_OVF_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	af 93       	push	r26
  9e:	bf 93       	push	r27
  a0:	ef 93       	push	r30
  a2:	ff 93       	push	r31
  a4:	df 93       	push	r29
  a6:	cf 93       	push	r28
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  TCNT0 = timer_start;          //Pocz¹tkowa wartoœæ licznika
  ac:	e2 e5       	ldi	r30, 0x52	; 82
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24

  cnt++;     //zwiêksza zmienn¹ licznik
  b4:	80 91 60 00 	lds	r24, 0x0060
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	80 93 60 00 	sts	0x0060, r24
  if(cnt>3)  //jeœli 4 przerwania (czyli ok 1 s)
  be:	80 91 60 00 	lds	r24, 0x0060
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	70 f0       	brcs	.+28     	; 0xe2 <__vector_9+0x52>
  {
    PORTB ^= (1<<LED1); //suma modulo 2 (XOR) stanu poprzedniego
  c6:	a8 e3       	ldi	r26, 0x38	; 56
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	e8 e3       	ldi	r30, 0x38	; 56
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	8c 93       	st	X, r24
                              //na porcie i pinu LED1 (zmiana stanu na przeciwny)

    PORTB ^= (1<<LED2); //suma modulo 2 (XOR) stanu poprzedniego na porcie
  d2:	a8 e3       	ldi	r26, 0x38	; 56
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e8 e3       	ldi	r30, 0x38	; 56
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	8c 93       	st	X, r24
                             //pinu LED2 (zmiana stanu na przeciwny)
    cnt=0;     //zeruje zmienn¹ licznik
  de:	10 92 60 00 	sts	0x0060, r1
  }
}
  e2:	cf 91       	pop	r28
  e4:	df 91       	pop	r29
  e6:	ff 91       	pop	r31
  e8:	ef 91       	pop	r30
  ea:	bf 91       	pop	r27
  ec:	af 91       	pop	r26
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
